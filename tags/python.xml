<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chrisbarra.me (python)</title><link>http://www.chrisbarra.me/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://www.chrisbarra.me/tags/python.xml"></atom:link><language>en</language><lastBuildDate>Mon, 25 Jul 2016 14:59:34 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Classes, instances and attributes in Python</title><link>http://www.chrisbarra.me/posts/classes-instances-and-attributes-in-python.html</link><dc:creator>Christian Barra</dc:creator><description>&lt;div&gt;&lt;p&gt;Some days ago I got a simple question.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;# ?&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;My answer was wrong but it was the good occasion to pick some books and the &lt;strong&gt;&lt;a href="https://docs.python.org/3.5/reference/" title="Python 3.5.2 Reference"&gt;reference docs&lt;/a&gt;&lt;/strong&gt; back and spend some hours with the concepts behind: &lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;instances&lt;/strong&gt;, &lt;strong&gt;attributes&lt;/strong&gt; and &lt;strong&gt;namespaces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All the things you are going to read are related to Python 3.x.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Briefly introduction to Scope&lt;/h2&gt;
&lt;p&gt;In Python you have 2 very important concepts: &lt;strong&gt;scope&lt;/strong&gt; and &lt;strong&gt;namespace&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;They are both related but generally &lt;strong&gt;scope&lt;/strong&gt; is related to unqualified names (X for example) and &lt;strong&gt;namespace&lt;/strong&gt; is related to qualified attribute names (object.X).&lt;/p&gt;
&lt;p&gt;Due to the fact that in &lt;strong&gt;Python everything is an object&lt;/strong&gt; the difference is slight, but in general we can assume that.&lt;/p&gt;
&lt;p&gt;Time for some code&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;# global X&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# local X&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 20&lt;/span&gt;
&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Python (generally) follows the &lt;strong&gt;LEGB&lt;/strong&gt; rule, where LEGB means &lt;strong&gt;Local&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Enclosed&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Global&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Built-in&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LEGB&lt;/strong&gt; rule means that when you call &lt;strong&gt;X&lt;/strong&gt; Python will look in order inside the:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Local scope&lt;/li&gt;
&lt;li&gt;Enclosed scope&lt;/li&gt;
&lt;li&gt;Global&lt;/li&gt;
&lt;li&gt;Built-in.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And if Python doesn't find anything it throws an error:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#X = 20&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 20&lt;/span&gt;

&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;                                 &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b47feb56ddf&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 20&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b47feb56ddf&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#X = 20&lt;/span&gt;
      &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;4&lt;/span&gt;
      &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 20&lt;/span&gt;

&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;'X'&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you want to know more about &lt;strong&gt;LEGB&lt;/strong&gt; you can start from &lt;strong&gt;&lt;a href="http://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules" title="Python LEGB Rule"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let's go back to our classes.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;# class is a reserved keyword used to create class&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We just defined a simple class, named &lt;strong&gt;C&lt;/strong&gt;, &lt;strong&gt;X&lt;/strong&gt; is defined inside &lt;strong&gt;class C&lt;/strong&gt;, &lt;strong&gt;c&lt;/strong&gt; is what we call an &lt;strong&gt;object of C&lt;/strong&gt; or an &lt;strong&gt;instance of C&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"f"&lt;/strong&gt; is a &lt;em&gt;function&lt;/em&gt; that accepts 1 parameter, &lt;strong&gt;self&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1039aaae8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x103ea8e10&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now the first strange part, we called &lt;strong&gt;f&lt;/strong&gt;, a function defined inside &lt;strong&gt;C&lt;/strong&gt;, and we get &lt;strong&gt;&lt;em&gt;2 different things&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;&lt;em&gt;function&lt;/em&gt;&lt;/strong&gt; with &lt;strong&gt;C.f&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;method&lt;/em&gt;&lt;/strong&gt; with &lt;strong&gt;c.f&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The keyword here is &lt;strong&gt;bound&lt;/strong&gt; or at least it's where the main difference lives.&lt;/p&gt;
&lt;p&gt;But let's call our function (or method in this case):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;                                 &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;abfb4dafb0b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="mi"&gt;4&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;abfb4dafb0b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
      &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;'X'&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;mmmm.... Python should find &lt;strong&gt;X&lt;/strong&gt; following the &lt;strong&gt;LEGB&lt;/strong&gt;, does the &lt;strong&gt;LEGB&lt;/strong&gt; rule still apply or not ?&lt;/p&gt;
&lt;p&gt;Let's try with this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Output: 50&lt;/span&gt;
&lt;span class="c1"&gt;# Output: 10&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We have a nested function (f1) and we added X = 50 in the global scope and now the code works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But what about X inside class C ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well &lt;strong&gt;X&lt;/strong&gt; (inside class C) is not exactly a &lt;em&gt;variable&lt;/em&gt;, it's an &lt;strong&gt;attribute&lt;/strong&gt; and behaves in a different way from a &lt;em&gt;variable&lt;/em&gt; when we talk about &lt;strong&gt;LEGB&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 10&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We just changed X with &lt;strong&gt;self.X&lt;/strong&gt; inside the print function a now it works.&lt;/p&gt;
&lt;p&gt;Why ?&lt;/p&gt;
&lt;p&gt;Well.... time to explain the concept of &lt;strong&gt;self&lt;/strong&gt; and &lt;strong&gt;namespaces&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Self&lt;/h2&gt;
&lt;p&gt;As I said, &lt;strong&gt;self&lt;/strong&gt; is just a parameter.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;legion&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;legion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 10&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This code works in the same way, we use &lt;strong&gt;self&lt;/strong&gt; as a convention, it's just a reference to the &lt;strong&gt;instance&lt;/strong&gt;, in this case to the instance &lt;strong&gt;c&lt;/strong&gt;, that is passed to the function when we call it.&lt;/p&gt;
&lt;p&gt;When we type &lt;strong&gt;c.f()&lt;/strong&gt;  Python is calling &lt;strong&gt;C.f(c)&lt;/strong&gt;, where &lt;strong&gt;C&lt;/strong&gt; is the class of our instance, &lt;strong&gt;f&lt;/strong&gt; is our function/method and &lt;strong&gt;c&lt;/strong&gt; is the first parameter required by &lt;strong&gt;f&lt;/strong&gt; (self or legion).&lt;/p&gt;
&lt;p&gt;And do you remember this ?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;bound method C.f of &amp;lt;__main__.C object at 0x1039cf6d8&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now the meaning of &lt;strong&gt;bound&lt;/strong&gt; is more clear, it means that when we call &lt;strong&gt;f&lt;/strong&gt; with &lt;strong&gt;c.f&lt;/strong&gt; we are automatically passing a reference to our instance.&lt;/p&gt;
&lt;p&gt;So from this moment when we talk about a function that accept a self parameter we will call it &lt;strong&gt;instance method&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And yes you can also have &lt;strong&gt;unbound method&lt;/strong&gt;, that are not related to your instances like &lt;strong&gt;class method&lt;/strong&gt; or &lt;strong&gt;static method&lt;/strong&gt;, but we leave this for the future.&lt;/p&gt;
&lt;h2&gt;Namespaces&lt;/h2&gt;
&lt;p&gt;A namespace is a collection of...names.&lt;/p&gt;
&lt;p&gt;A collection of &lt;strong&gt;references&lt;/strong&gt; to &lt;strong&gt;objects&lt;/strong&gt; like &lt;strong&gt;name=object&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why &lt;strong&gt;namespaces&lt;/strong&gt; are so important ?&lt;/p&gt;
&lt;p&gt;Because every class has a namespace and...... every instance of a class has a namespace too.&lt;/p&gt;
&lt;p&gt;They are completely &lt;strong&gt;separated&lt;/strong&gt; but related &lt;em&gt;somehow&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let's look inside our class and instance namespaces, we have a built-in attribute for this: &lt;strong&gt;__dict&lt;/strong&gt;__&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# I cleaned the output of C.__dict__ of all the built-in methods/attributes&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# mappingproxy({'f': &amp;lt;function C.f at 0x1039c1378&amp;gt;, 'X': 10})&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# {}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;As you can see class namespace and instance namespace are completely different.&lt;/p&gt;
&lt;p&gt;Class namespace is a &lt;strong&gt;mappingproxy&lt;/strong&gt;, instance namespace is a &lt;strong&gt;dict&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A mappingproxy is a kind of &lt;strong&gt;read-only&lt;/strong&gt; dict.&lt;/p&gt;
&lt;p&gt;You can find why mappingproxy is used &lt;strong&gt;&lt;a href="http://stackoverflow.com/questions/32720492/why-is-a-class-dict-a-mappingproxy" title="why-is-a-class-dict-a-mappingproxy"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When I said that mappingproxy is read-only I mean that you cannot assign items using the mappingproxy as a dict for example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 10&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;                                 &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;193&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ec143c56e8cd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'mappingproxy'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;assignment&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you want to put new elements inside your class namespace you have to use other ways.&lt;/p&gt;
&lt;p&gt;Back to &lt;strong&gt;C namespace&lt;/strong&gt; we can find &lt;strong&gt;f&lt;/strong&gt;, our instance method, and &lt;strong&gt;X&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X&lt;/strong&gt; as we said is not properly a &lt;em&gt;variable&lt;/em&gt; and is defined in &lt;strong&gt;C.__dict__&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;How can we call it ? &lt;strong&gt;Class attribute&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And with class attribute we mean that &lt;strong&gt;X&lt;/strong&gt; (attribute) belongs to &lt;strong&gt;C&lt;/strong&gt; (class), because as we see &lt;strong&gt;X&lt;/strong&gt; is inside &lt;strong&gt;C namespace&lt;/strong&gt; (C.__dict__).&lt;/p&gt;
&lt;p&gt;Can we access directly a class attribute ?&lt;/p&gt;
&lt;p&gt;Yes, with &lt;strong&gt;NameOfTheClass.AttributeName&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="c1"&gt;# 10&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Just to recap:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C namespace contains &lt;strong&gt;f&lt;/strong&gt; (a method) and &lt;strong&gt;X&lt;/strong&gt; (a class attribute)&lt;/li&gt;
&lt;li&gt;c namespace is empty&lt;/li&gt;
&lt;li&gt;We accessed X of C with &lt;strong&gt;self.X&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But before I said that &lt;strong&gt;class namespaces&lt;/strong&gt; and &lt;strong&gt;instance namespaces&lt;/strong&gt; are completely separated.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 10&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When we type &lt;strong&gt;self.X&lt;/strong&gt; we tell Python to "&lt;em&gt;look inside the namespace of instance &lt;strong&gt;self&lt;/strong&gt; for &lt;strong&gt;X&lt;/strong&gt;&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can we access something that belongs to C (attribute X) from self.X (our instance) ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Time for the next part.&lt;/p&gt;
&lt;h2&gt;MRO&lt;/h2&gt;
&lt;p&gt;MRO means &lt;em&gt;&lt;strong&gt;Method Resolution Order&lt;/strong&gt;&lt;/em&gt; and is how and why from &lt;strong&gt;self.X&lt;/strong&gt; we get &lt;strong&gt;C.__dict__['X']&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As I said namespace of a class and its instances are separated but somehow related.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MRO&lt;/strong&gt; is behind the "&lt;em&gt;somehow related&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;When Python look for an attribute, like &lt;strong&gt;self.X&lt;/strong&gt;, it will search in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instance namespace&lt;/li&gt;
&lt;li&gt;Class namespace&lt;/li&gt;
&lt;li&gt;Parents of your class namespace&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Object is...the mother of all classes but we are not going to talk about &lt;em&gt;her&lt;/em&gt; here.&lt;/p&gt;
&lt;p&gt;Let's look at another example&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mother&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Father&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Son&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mother&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Father&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"M"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 22&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"F"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 34&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 10&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 22&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 34&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Output: 10&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;With &lt;a href="https://docs.python.org/3/library/functions.html#getattr" title="getattr"&gt;getattr&lt;/a&gt; we are using our instance (self) and another parameter ("M", "F" or "S") to get our class attributes.&lt;/p&gt;
&lt;p&gt;I used &lt;a href="https://docs.python.org/3/library/functions.html#getattr" title="getattr"&gt;getattr&lt;/a&gt; because I can specify dynamically the name of the attribute but is exactly like self.M (or a.M in our case).&lt;/p&gt;
&lt;p&gt;As I said our instance is related to its class (Son) and to the superclasses of Son (Mother and Father).&lt;/p&gt;
&lt;p&gt;The process of giving an order between your instance and its class and between your class and all its superclasses is called &lt;strong&gt;linearization&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The algorithm behind Python MRO is called &lt;strong&gt;&lt;a href="https://www.python.org/download/releases/2.3/mro/" title="Python MRO"&gt;C3&lt;/a&gt;&lt;/strong&gt;
and the main thing to remember is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;children precede their parents (aka superclasses) and the order of appearance in __bases__ is respected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bases are what we put inside the parenthesis after the name of a class: class Name(bases).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instance &lt;strong&gt;a&lt;/strong&gt; is a child of class &lt;strong&gt;A&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Class &lt;strong&gt;A&lt;/strong&gt; is a child of class &lt;strong&gt;Mother&lt;/strong&gt; and &lt;strong&gt;Father&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Class &lt;strong&gt;Mother&lt;/strong&gt; and &lt;strong&gt;Father&lt;/strong&gt; are both children of object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With &lt;strong&gt;__bases__&lt;/strong&gt; we get a tuple with the parents of a class, with &lt;strong&gt;__class__&lt;/strong&gt; we get the class of an instance:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt; &lt;span class="c1"&gt;# __main__.A,&lt;/span&gt;
&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bases__&lt;/span&gt; &lt;span class="c1"&gt;# (__main__.Mother, __main__.Father)&lt;/span&gt;
&lt;span class="n"&gt;Mother&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bases__&lt;/span&gt; &lt;span class="c1"&gt;# (object,)&lt;/span&gt;
&lt;span class="n"&gt;Father&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__bases__&lt;/span&gt; &lt;span class="c1"&gt;# (object,)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Nothing new I would say, can we see the search order of MRO ?&lt;/p&gt;
&lt;p&gt;Yes, with &lt;strong&gt;__mro&lt;/strong&gt;__:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__mro__&lt;/span&gt; &lt;span class="c1"&gt;# (__main__.Son, __main__.Mother, __main__.Father, object)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When we type the code below:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="c1"&gt;# 22&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Python searches in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a.__dict__&lt;/li&gt;
&lt;li&gt;Son.__dict__&lt;/li&gt;
&lt;li&gt;Mother.__dict__&lt;/li&gt;
&lt;li&gt;Father.__dict__&lt;/li&gt;
&lt;li&gt;object.__dict__&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With the rule first-come first-served.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mother&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Father&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Son&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mother&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Father&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="c1"&gt;# Output: 50&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This is why we get 50 here instead of 34.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First Python looks inside &lt;strong&gt;a&lt;/strong&gt; (Son's instance) namespace, but nothing is found named &lt;strong&gt;"F"&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Then it's time to look inside the namespace of Son, class of our instance, and we found &lt;strong&gt;"F"&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And what about F defined inside Father ?&lt;/p&gt;
&lt;p&gt;As I said &lt;em&gt;first-come first-served&lt;/em&gt;, and in our &lt;strong&gt;__mro__&lt;/strong&gt; Son namespace is before Father namespace.&lt;/p&gt;
&lt;p&gt;And what does it happen if you look for a reference that doesn't exist in all the __mro__ namespaces ?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DXIUISD&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;                            &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bcb50197f1e4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DXIUISD&lt;/span&gt;

&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;'DXIUISD'&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;You get an &lt;strong&gt;AttributeError&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But where is the tricky part ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MRO and all the things explained above work only when you try to &lt;strong&gt;retrieve&lt;/strong&gt; an attribute/method and with &lt;strong&gt;retrieve&lt;/strong&gt; I mean object.attribute or object.method in general.&lt;/p&gt;
&lt;p&gt;When you try to &lt;strong&gt;assign&lt;/strong&gt; an attribute/method (like object.attribute = 10) you do that in the &lt;strong&gt;namespace of the object (instance/class)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can change the behaviour with advanced and magic things (metaclass, inheritance, descriptor, property...) but this is how it &lt;strong&gt;normally&lt;/strong&gt; works.&lt;/p&gt;
&lt;p&gt;So when we type this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Python looks for the attribute inside the namespaces following the __mro__ order.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;But with this the __mro__ doesn't matter, &lt;strong&gt;Python will create a new attribute or change its value if exists&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mother&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Son&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mother&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;

&lt;span class="n"&gt;Mother&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="c1"&gt;# 34&lt;/span&gt;
&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="c1"&gt;# 50 # operation 1&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# remove F from Son.__dict__ # operation 2&lt;/span&gt;
&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="c1"&gt;# 34 # operation 3&lt;/span&gt;
&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="c1"&gt;# operation 4&lt;/span&gt;
&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="c1"&gt;# 30&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Clear how it works ?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With Son.F we get 50 because is defined inside Son namespace&lt;/li&gt;
&lt;li&gt;We delete F attribute from Son namespace&lt;/li&gt;
&lt;li&gt;There is no attribute inside Son namespace called "F" and the next phase for Python is to look inside Mother namespace, where it finds F = 34&lt;/li&gt;
&lt;li&gt;The assignment, Son.F = 30, is done inside the Son namespace, now we have a new occurrence for F inside Son namespace, this is why Son.F is 30&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the namespaces&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'S'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# After 1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'S'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt; &lt;span class="c1"&gt;# After 2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'S'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# After 4&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;&lt;strong&gt;__init__&lt;/strong&gt; method&lt;/h2&gt;
&lt;p&gt;Init method is a special method to customize our instance, and it's called when we create an instance.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Translated it means "&lt;em&gt;when you call A(something) create a new instance of A and assign something to self.x&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;Let's look inside the namespace.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# (mappingproxy({'__init__': &amp;lt;function A.__init__ at 0x103ecab70&amp;gt;, 'C': 10})&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# {'x': 10}&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;#  {'x': 50}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; has its attributes, C and __init__, &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; their own x.&lt;/p&gt;
&lt;p&gt;The attributes of &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; are called &lt;strong&gt;instance attributes&lt;/strong&gt;, and &lt;strong&gt;they belong to their instance&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now it should be clear the output of this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# (10, 10, 10)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Both &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; have no references of the attribute C in their namespaces, so Python looks inside &lt;strong&gt;A&lt;/strong&gt; namespace to find something (following the MRO).&lt;/p&gt;
&lt;p&gt;But what happens if we do this ?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# {'C': 50, 'x': 10}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We create a new reference inside &lt;strong&gt;a&lt;/strong&gt; namespace.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# (10, 50, 10)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This is why we get this result, because now when we look for C inside &lt;strong&gt;a&lt;/strong&gt; we have an occurrence.&lt;/p&gt;
&lt;p&gt;Let's see the &lt;strong&gt;dict&lt;/strong&gt; of &lt;strong&gt;A&lt;/strong&gt;, &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; again&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# (mappingproxy({'__init__': &amp;lt;function A.__init__ at 0x103ecab70&amp;gt;, 'C': 10})&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# {'C': 50, 'x': 10}&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;#  {'x': 10}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;But what if we change A.C ?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# (20, 50, 20)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;a.C remains 50 and b.C still looks inside &lt;strong&gt;A&lt;/strong&gt; namespace because its namespace doesn't have any value for "C".&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now instances &lt;strong&gt;a&lt;/strong&gt;, &lt;strong&gt;b&lt;/strong&gt; and the class &lt;strong&gt;A&lt;/strong&gt; have a reference for "C" in their namespaces.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# (mappingproxy({'__init__': &amp;lt;function A.__init__ at 0x103ecab70&amp;gt;, 'C': 10})&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;# {'C': 50, 'x': 10}&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="c1"&gt;#  {'C': 70, 'x': 50}&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Can I access a class attribute from an instance ?&lt;/h2&gt;
&lt;p&gt;Yes, but if you have a reference in your namespace with the same name you need to be &lt;strong&gt;explicit&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 10 10&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 10 50&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;So we just hardcoded &lt;strong&gt;A.C&lt;/strong&gt; inside our method.&lt;/p&gt;
&lt;p&gt;Is there a better way ?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# First&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Second&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 10 10&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 10 50&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Personally I prefer the second (more clear to me).&lt;/p&gt;
&lt;h2&gt;But what if....&lt;/h2&gt;
&lt;p&gt;we have this code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;and then we type this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# ([], [], [])&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# ([50], [50], [50])&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# ([50, 10], [50, 10], [50, 10])&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# ([10], [10], [10])&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The class attribute &lt;strong&gt;A.C&lt;/strong&gt; this time seems really &lt;em&gt;shared&lt;/em&gt;, but also the class attributes that we used before were &lt;em&gt;initially shared&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So why we can append and pop elements without any kind of problem ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Because we didn't do any kind of assignment&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And our instances and class are "working" on a mutable object, &lt;strong&gt;accessing the object pointed by the reference (C) and changing it directly&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# ([10], [10, 10], [10])&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;After an assignment &lt;strong&gt;a.C&lt;/strong&gt; has a new reference inside its namespace.&lt;/p&gt;
&lt;p&gt;But the tricky part is this one....if instead of the last code we type this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="c1"&gt;# ?&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;what would be the output ?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In this case we didn't have any new assignment, so we are still changing the referenced object.&lt;/p&gt;
&lt;p&gt;Why ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due to how augmented assignments (+=, -=, *=, /=, ...) work&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With list and mutable objects there isn't an &lt;em&gt;assignment&lt;/em&gt; and the operation is done "in-place", we are just updating the &lt;strong&gt;referenced object&lt;/strong&gt; directly.&lt;/p&gt;
&lt;p&gt;So back to the initial question...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;# ?&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The answer is 1 because b.x = 11 creates a new attribute (instance attribute) inside &lt;strong&gt;b&lt;/strong&gt; namespace.&lt;/p&gt;
&lt;p&gt;The namespace of &lt;strong&gt;a&lt;/strong&gt; remains empty, so &lt;strong&gt;a.x&lt;/strong&gt; will look inside the namespace of &lt;strong&gt;A&lt;/strong&gt; where &lt;strong&gt;x&lt;/strong&gt; is still equal to 1.&lt;/p&gt;
&lt;p&gt;If you wanto to go further with OOP in Python I think nothing is better than &lt;a href="https://speakerdeck.com/lgiordani/object-oriented-python-from-scratch" title="slides"&gt;Leonardo Giordani's training&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.chrisbarra.me/posts/classes-instances-and-attributes-in-python.html</guid><pubDate>Sat, 09 Jul 2016 19:00:10 GMT</pubDate></item><item><title>How to start with Python and some useful resources</title><link>http://www.chrisbarra.me/posts/how-to-start-with-python-and-some-useful-resources.html</link><dc:creator>Christian Barra</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Python is an awesome language, simple, explicit, readable and powerful.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I spent a lot of time wondering about how to start learning Python, which resources use and what books I should buy.&lt;/p&gt;
&lt;p&gt;After this and some money spent on books I want to share my experience:&lt;/p&gt;
&lt;p&gt;First of all there’s a lot of free resources so I think it is not useful to invest too much money on books or other things.&lt;/p&gt;
&lt;h2&gt;To start&lt;/h2&gt;
&lt;p&gt;There's a lot of interesting Python online courses, they don't talk about every aspect of Python but they are a good starting point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember to start with Python 3 !&lt;/strong&gt;  &lt;/p&gt;
&lt;h4&gt;Online courses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codecademy.com/tracks/python" title="Codecademy Python Track"&gt;Codecademy Python Track&lt;/a&gt; - Very useful, with a few hours of practice you can begin mastering the Python basics.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnpythonthehardway.org/book/" title="Learnpython.org"&gt;Learnpython.org&lt;/a&gt; - Another interesting online course&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnpythonthehardway.org/book" title="Learn Python the hardway"&gt;Learn Python the hardway&lt;/a&gt; - If you prefer the "hardway" both course/book.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So pick up one of this course and start learning Python.&lt;/p&gt;
&lt;h4&gt;Books&lt;/h4&gt;
&lt;p&gt;If you prefer some good books I think this is the best to start.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920028154.do" title="Learning Python"&gt;Learning Python&lt;/a&gt; - Awesome book, it talks deeply about every aspect of Python and sometimes it’s a little “boring”. But, personally, I can call it the Python Bible.
This book costs a lot of money and it's worth it, but often you'll find interesting offer (50 % discount) on O'Reilly site.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful resource&lt;/h2&gt;
&lt;h4&gt;Video&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/" title="Pyvideo"&gt;Pyvideo&lt;/a&gt; - A collection of PyCon talks&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Books&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/" title="Officiale Python Docs"&gt;Officiale Python Docs&lt;/a&gt; - save it in your bookmarks, it's your reference about Python.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920023784.do" title="Python for Data Analysis"&gt;Python for Data Analysis&lt;/a&gt; - Awesome book about Numpy and Scipy is in my to-read-list.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920030195.do" title="Mining the Social Web"&gt;Mining the Social Web&lt;/a&gt; - Great book about data mining, another must read book.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/9781782161400.do" title="Building Machine Learning Systems with Python"&gt;Building Machine Learning Systems with Python&lt;/a&gt; - If you want to start with ML this is the right book for you.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920028338.do" title="Python Pocket Reference"&gt;Python Pocket Reference&lt;/a&gt; -It's a good pocket reference, if you can get it for 5 bucks it's a best buy.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920029533.do" title="Test-Driven Development with Python"&gt;Test-Driven Development with Python&lt;/a&gt; - I've read some pages, interesting but I recommend from an intermediate level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Same as for "Learning Python", these books cost a lot of money, but you can get them with some good discount on O'Really site.&lt;/p&gt;
&lt;h4&gt;Slides&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/" title="Slideshare.com"&gt;Slideshare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/" title="Speackerdeck.com"&gt;Speackerdeck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Events and Conferences&lt;/h4&gt;
&lt;p&gt;Go to &lt;a href="http://www.meetup.com/" title="Meetup.com"&gt;meetup.com&lt;/a&gt; and look for a Python meetup in your city and most of all take a ticket for the next PyCon in your country.
This is my first year that I’ve participated in PyCon Italy and DjangoVillage and it was a great experience which left me wondering why I have not gone before.&lt;/p&gt;
&lt;h2&gt;Mistakes to avoid&lt;/h2&gt;
&lt;p&gt;Don’t make my mistake to buy a lot of interesting long books about Python when you're not started to code yet.&lt;/p&gt;
&lt;p&gt;Remember, reading docs and books is important but code is much more important !
So after studying function, generators, class and others remember to write some code to see if you understood what you have studied.&lt;/p&gt;
&lt;p&gt;It's time to code now !&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.chrisbarra.me/posts/how-to-start-with-python-and-some-useful-resources.html</guid><pubDate>Wed, 18 Jun 2014 18:00:50 GMT</pubDate></item></channel></rss>